services:
    main:
        build: "./main"
        container_name: main
        hostname: main
        restart: unless-stopped
        environment:
            # - NODE_ENV=production
            - NODE_NO_WARNINGS=1
            - NODE_TLS_REJECT_UNAUTHORIZED=0 # per l'https del db
        depends_on:
            couchdb:
                condition: service_healthy
        links:
            - couchdb
        networks:
            - frontend
            - backend
        env_file:
            - ${DOTFILES}/.env
        volumes:
            - ./main/public:/usr/src/app/public
            - ./main/config:/usr/src/app/config
            - ./main/models:/usr/src/app/models
            - ./main/routes:/usr/src/app/routes
            - ./main/views:/usr/src/app/views
            - ./main/server.js:/usr/src/app/server.js
            - ./main/server.test.js:/usr/src/app/server.test.js
    mail:
        build: "./mail"
        container_name: mail
        hostname: mail
        restart: unless-stopped
        environment:
            # - NODE_ENV=production
            - NODE_NO_WARNINGS=1
            - NODE_TLS_REJECT_UNAUTHORIZED=0 # per l'https del db
        depends_on:
            - main
        links:
            - main
        networks:
            - backend
        env_file:
            - ${DOTFILES}/.env
        volumes:
            - ./mail/server.js:/usr/src/app/server.js
            - ./mail/server.test.js:/usr/src/app/server.test.js
    api:
        build: "./api"
        container_name: api
        hostname: api
        restart: unless-stopped
        environment:
            # - NODE_ENV=production
            - NODE_NO_WARNINGS=1
            - NODE_TLS_REJECT_UNAUTHORIZED=0 # per l'https del db
        depends_on:
            - main
            - ws
        links:
            - main
            - ws
        networks:
            - backend
        env_file:
            - ${DOTFILES}/.env
        volumes:
            - ./api/server.js:/usr/src/app/server.js
            - ./api/server.test.js:/usr/src/app/server.test.js
    ws:
        build: "./ws"
        container_name: ws
        hostname: ws
        ports:
            - '1337:1337'
        restart: unless-stopped
        environment:
            # - NODE_ENV=production
            - NODE_NO_WARNINGS=1
            - NODE_TLS_REJECT_UNAUTHORIZED=0 # per l'https del db
        depends_on:
            - main
        links:
            - main
        networks:
            - backend
        env_file:
            - ${DOTFILES}/.env
        volumes:
            - ./ws/server.js:/usr/src/app/server.js
            - ./ws/server.test.js:/usr/src/app/server.test.js
    nginx:
        build: "./nginx"
        container_name: nginx
        hostname: nginx
        ports:
            - "80:80"
            - "443:443"
        restart: unless-stopped
        depends_on:
            - main
        networks:
            - frontend
            - backend
        env_file:
            - ${DOTFILES}/.env
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./nginx/ssl:/etc/nginx/ssl
            - ${DOTFILES}/nginx/ssl/travelup_key.pem:/etc/nginx/ssl/travelup_key.pem
    couchdb:
        image: couchdb
        restart: always
        container_name: couchdb
        hostname: couchdb
        ports:
            - "6984:6984" # Management diretto (write) su https://localhost:6984/_utils/ e cache (read) su https://localhost:4984/
        networks:
            - backend
        env_file:
            - ${DOTFILES}/.env
        volumes:
            - ./couchdb:/opt/couchdb/data
            - ./couchdb/local.ini:/opt/couchdb/etc/local.ini
            - ./nginx/ssl:/opt/couchdb/ssl
        healthcheck:
            test: [ "CMD-SHELL", "curl -f http://localhost:5984/" ]
            interval: 5s
            timeout: 5s
            retries: 5
            start_period: 40s
networks:
    frontend:
    backend:
